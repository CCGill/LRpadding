// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// update_logreg_coeffs
void update_logreg_coeffs(Eigen::Map<Eigen::MatrixXd> model, Eigen::Map<Eigen::MatrixXd> responsemat, Eigen::Map<Eigen::MatrixXd> coeffmat, Eigen::Map<Eigen::MatrixXd> Xb, Eigen::Map<Eigen::MatrixXd> fitted, Eigen::Map<Eigen::VectorXd> cols_to_update, int padding_zeros);
RcppExport SEXP _LRpadding_update_logreg_coeffs(SEXP modelSEXP, SEXP responsematSEXP, SEXP coeffmatSEXP, SEXP XbSEXP, SEXP fittedSEXP, SEXP cols_to_updateSEXP, SEXP padding_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type responsemat(responsematSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type coeffmat(coeffmatSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Xb(XbSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type cols_to_update(cols_to_updateSEXP);
    Rcpp::traits::input_parameter< int >::type padding_zeros(padding_zerosSEXP);
    update_logreg_coeffs(model, responsemat, coeffmat, Xb, fitted, cols_to_update, padding_zeros);
    return R_NilValue;
END_RCPP
}
// basic_logistic_reg_
Rcpp::NumericVector basic_logistic_reg_(Rcpp::NumericMatrix x, Rcpp::NumericVector y);
RcppExport SEXP _LRpadding_basic_logistic_reg_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(basic_logistic_reg_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// logistic_reg_
Rcpp::List logistic_reg_(Rcpp::NumericMatrix x, Rcpp::NumericVector y, Rcpp::NumericVector start, double eps_f, double eps_g, int maxit);
RcppExport SEXP _LRpadding_logistic_reg_(SEXP xSEXP, SEXP ySEXP, SEXP startSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_reg_(x, y, start, eps_f, eps_g, maxit));
    return rcpp_result_gen;
END_RCPP
}
// basic_padding_logistic_reg_
Rcpp::NumericVector basic_padding_logistic_reg_(Rcpp::NumericMatrix x, Rcpp::NumericVector y, int padding);
RcppExport SEXP _LRpadding_basic_padding_logistic_reg_(SEXP xSEXP, SEXP ySEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(basic_padding_logistic_reg_(x, y, padding));
    return rcpp_result_gen;
END_RCPP
}
// padded_logistic_reg_
Rcpp::List padded_logistic_reg_(Rcpp::NumericMatrix x, Rcpp::NumericVector y, int padding, Rcpp::NumericVector start, double eps_f, double eps_g, int maxit);
RcppExport SEXP _LRpadding_padded_logistic_reg_(SEXP xSEXP, SEXP ySEXP, SEXP paddingSEXP, SEXP startSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(padded_logistic_reg_(x, y, padding, start, eps_f, eps_g, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LRpadding_update_logreg_coeffs", (DL_FUNC) &_LRpadding_update_logreg_coeffs, 7},
    {"_LRpadding_basic_logistic_reg_", (DL_FUNC) &_LRpadding_basic_logistic_reg_, 2},
    {"_LRpadding_logistic_reg_", (DL_FUNC) &_LRpadding_logistic_reg_, 6},
    {"_LRpadding_basic_padding_logistic_reg_", (DL_FUNC) &_LRpadding_basic_padding_logistic_reg_, 3},
    {"_LRpadding_padded_logistic_reg_", (DL_FUNC) &_LRpadding_padded_logistic_reg_, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_LRpadding(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
